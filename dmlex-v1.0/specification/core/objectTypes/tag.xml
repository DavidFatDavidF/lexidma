<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                         "http://www.docbook.org/xml/4.5/docbookx.dtd" [
                         <!ENTITY % xinclude SYSTEM "../../docbook/xinclude.mod" >
                         %xinclude;
                         <!ENTITY % local.common.attrib "xml:base CDATA #IMPLIED" >
]>

<section>

  <title>
    <code>tag</code>
  </title>
  <para>Represents one (of many) possible values for <code>partOfSpeech</code>, <code>inflectedTag</code>, <code>label</code>, and <code>source</code>. Example: <xref linkend="ex05"/>.</para>
  <programlisting>
tag: &lt;string&gt;
    description: (0..1) &lt;string&gt;
    target: (0..n) &lt;symbol&gt;
    partOfSpeechConstraint: (0..n) &lt;string&gt;
    sameAs: (0..n)
</programlisting>
  <section>
    <title>XML</title>
    <programlisting>
&lt;tag value="..."&gt;
    &lt;description&gt;...&lt;/description&gt;
    &lt;target value="..."/&gt;
    &lt;partOfSpeechConstraint value="..."/&gt;
    &lt;sameAs.../&gt;
&lt;/tag&gt;
</programlisting>
  </section>
  <section>
    <title>JSON</title>
    <programlisting>
{
    "value": "...",
    "description": "...",
    "targets": ["..."],
    "partOfSpeechConstraints": ["..."],
    "sameAs": [...]
}
</programlisting>
  </section>
  <section>
      <title>RDF</title>
      <programlisting>
&lt;entry&gt; dmlex:tag [
  a dmlex:Tag ;
  dmlex:description "..." ;
  dmlex:target "..." ;
  dmlex:partOfSpeechConstraints "..." ;
  dmlex:sameAs ... ] .
      </programlisting>
  </section>
  <section>
    <title>SQL</title>
    <programlisting>
create table tags (
    lexicographicResourceID int foreign key references lexicographicResource(id),
    value varchar(10),
    description varchar(255),
    targets varchar(255), --comma-separated list
    partOfSpeechConstraints varchar(255), --comma-separated list
    id int primary key
)
</programlisting>
  </section>
  <section>
    <title>Comments</title>
    <itemizedlist>
      <listitem>
        <para>The value is an abbreviation, a code or some other string of text which identifies the source. If you want, you can design your implementation to enforce referential integrity between <code>tag</code> values on the one hand and  <code>partOfSpeech</code>, <code>inflectedTag</code> etc. objects on the other hand. In other words, you can make it so that the tags you define in <code>tag</code> objects are the only values allowed for <code>partOfSpeech</code>, <code>inflectedTag</code> etc. However, doing this is optional in DMLex. An implementation of DMLex is compliant regardless of whether it enforces referential integrity on <code>tag</code> values.</para>
      </listitem>
      <listitem>
        <para>
          <code>description</code> is a human-readable description of what the tag means.</para>
      </listitem>
      <listitem>
        <para>
          <code>target</code> tells us where exactly the tag is expected to be used. If omitted, then all four. The possible values are:</para>
        <itemizedlist>
          <listitem>
            <para>
              <code>partOfSpeech</code>: as the value of a <code>partOfSpeech</code> object</para>
          </listitem>
          <listitem>
            <para>
              <code>inflectedTag</code>: as the value of an <code>inflectedTag</code> object</para>
          </listitem>
          <listitem>
            <para>
              <code>sourceIdentity</code>: as the value of a <code>sourceIdentity</code> object</para>
          </listitem>
          <listitem>
            <para>
              <code>label</code>: as the value of a <code>label</code> object</para>
          </listitem>
          <listitem>
            <para>
              <code>definitionType</code>: as the value of a <code>definitionType</code> object</para>
          </listitem>
          <listitem>
            <para>
              <code>collocateRole</code>: as the value of a <code>collocateRole</code> object</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>
          <code>partOfSpeechConstraint</code>, if present, says that this tag is only intended to be used inside entries that are labelled with this part of speech. You can us this to constrain that, for example, only nouns and adjectives can have plurals but other parts of speech cannot.</para>
      </listitem>
      <listitem>
        <para>
          <code>target</code> and <code>partOfSpeechConstraint</code> allow you to specify constraints on which tags are expected to appear where throughout the lexicographic resource. Enforcing these constraints in your implementation is optional.</para>
      </listitem>
    </itemizedlist>
  </section>
  
</section>
